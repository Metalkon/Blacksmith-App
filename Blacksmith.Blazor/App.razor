@inject PlayerDataService playerData
@inject CustomAuthStateProvider authStateProvider

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <img src="./images/KnightCombo.gif" alt="Loading" style="display: block; margin: 0 auto;" />
                    <p role="alert" style="text-align: center;">You do not have permission to access this page.</p>
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <img src="./images/KnightIdle.gif" alt="Loading" style="display: block; margin: 0 auto;" />
                <p role="alert" style="text-align: center;">The requested page could not be found.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        var state = await authStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity.IsAuthenticated == true)
        {
            playerData.UpdatePlayerData();
        }
    }
}
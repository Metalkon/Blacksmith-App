@inject HttpClientTokenService client
@using Shared_Classes.Models


<h2 style="text-align:center;">Item Manager</h2>

<!-- Search Query Input Box/Button -->
<div style="display: flex; padding-bottom: 10px; padding-top: 10px;">
    <input id="nameInput" type="text" style="margin-right: 5px" @bind-value="Pagination.SearchQuery" />
    <button class="btn btn-primary" @onclick="@(() => NameSearchButton())">Search</button>
    <div style="flex: 1;"></div>
    <button class="btn btn-primary" style="float: right;" @onclick="@CreateItem">Create Item</button>
</div>

<!-- Search Table -->
<table class="table table-bordered table-striped" style="width:100%">
    <thead>
        <tr>
            <th>Image</th>
            <th>Id</th>
            <th>Name</th>
            <th>Rarity</th>
            <th>Tier</th>
            <th>Tradable?</th>
            <th style="width: 1%">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in ItemList)
        {
            <tr>
                <td style="width: 1%;">
                    @if (!string.IsNullOrEmpty(item.Image))
                    {
                        <img src="@item.Image">
                    }
                    else
                    {
                        <img src="~/image/icon/question_mark.jpg" alt="Question Mark" />
                    }
                </td>
                <td style="width: 20%; vertical-align: middle;">@item.Id</td>
                <td style="width: 20%; vertical-align: middle;">@item.Name</td>
                <td style="width: 20%; vertical-align: middle;">@item.Rarity</td>
                <td style="width: 20%; vertical-align: middle;">@item.Tier</td>
                <td style="width: 20%; vertical-align: middle;">
                    @{
                        string tradableStatus = item.Tradable ? "Yes" : "No";
                    }
                    @tradableStatus
                </td>
                <td style="width: 1%; vertical-align: middle;">
                    <div class="text-center d-inline-flex">
                        <!-- Edit/Delete Buttons -->
                        <button class="btn btn-primary rounded" style="margin-right: 5px" @onclick="@(() => EditItem(item))">Edit</button>
                        <button class="btn btn-danger rounded" @onclick="@(() => DeleteItem(item.Id))">Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>


<!-- Pagination Buttons (Previous/Next) -->
<div style="display: flex; justify-content: center; align-items: center;">
    @if (Pagination.PageNumber > 1)
    {
        <a class="page-link" @onclick="PreviousPage">Previous</a>
    }
    else
    {
        <a class="page-link">Previous</a>
    }
    <a class="page-link">@Pagination.PageNumber</a>
    @if (ItemList.Count < 5)
    {
        <a class="page-link">Next</a>
    }
    else
    {
        <a class="page-link" @onclick="NextPage">Next</a>
    }
</div>

@code {
    [Parameter]
    public EventCallback<ItemDTO> UpdateItem { get; set; }
    [Parameter]
    public EventCallback ItemSearch { get; set; }
    [Parameter]
    public EventCallback NameSearch { get; set; }
    [Parameter]
    public EventCallback<string> ChangeState { get; set; }
    [Parameter]
    public EventCallback<string> ChangePage { get; set; }
    [Parameter]
    public List<ItemDTO> ItemList { get; set; }
    [Parameter]
    public ItemDTO Item { get; set; }
    [Parameter]
    public PaginationDTO Pagination { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //
    }

    // Edit Item
    private async Task NameSearchButton()
    {
        await NameSearch.InvokeAsync();
    }

    // Edit Item
    private async Task EditItem(ItemDTO editItem)
    {
        UpdateItem.InvokeAsync(editItem);
        await ChangeState.InvokeAsync("Edit");
    }

    // Create Item
    private async Task CreateItem()
    {
        UpdateItem.InvokeAsync(new ItemDTO());
        await ChangeState.InvokeAsync("Create");
    }

    // Delete Item
    private async Task DeleteItem(int id)
    {
        //await client.DeleteAsync($"https://localhost:8000/api/AdminItem/{id}");         
        // Replace with simply clearing an item, not deleting, and move to parent
        await ItemSearch.InvokeAsync();
    }

    // Pagination (Previous)
    private async Task PreviousPage()
    {
        Pagination.PageNumber--;
        await ItemSearch.InvokeAsync();
    }

    // Pagination (Next)
    private async Task NextPage()
    {
        Pagination.PageNumber++;
        await ItemSearch.InvokeAsync();
    }
}
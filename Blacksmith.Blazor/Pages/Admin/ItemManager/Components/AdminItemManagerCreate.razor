@inject HttpClientTokenService client

@if (pageState == "Loading")
{
    <LoadingComponent Message="Item Manager"></LoadingComponent>
}
@if (pageState == "Error")
{
    <ErrorComponent Message="@message"></ErrorComponent>
}
@if (pageState == "Active")
{
    <main class="d-flex justify-content-center align-items-center h-75 ">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-sm-10 col-md-8 col-lg-6">
                    <div class="card">
                        <div class="card-body m-sm-4">

                            <b><h3>Create Item</h3></b>

                            <div class="mb-1">
                                <label class="form-label fs-6">ItemId</label>
                                <input class="form-control form-control-sm" type="number" placeholder="ItemId" @bind-value="CreateItem.ItemId" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label fs-6">Name</label>
                                <input class="form-control form-control-sm" type="text" placeholder="Name" @bind-value="CreateItem.Name" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label fs-6">Type</label>
                                <input class="form-control form-control-sm" type="text" placeholder="Type" @bind-value="CreateItem.Type" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label fs-6">Price</label>
                                <input class="form-control form-control-sm" type="number" placeholder="Price" @bind-value="CreateItem.Price" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label fs-6">Quantity</label>
                                <input class="form-control form-control-sm" type="number" placeholder="Quantity" @bind-value="CreateItem.Quantity" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label fs-6">Tradable</label>
                                <select class="form-control form-control-sm" @bind="CreateItem.Tradable">
                                    <option value="true">True</option>
                                    <option value="false">False</option>
                                </select>
                            </div>
                            <div class="mb-1">
                                <label class="form-label fs-6">Image</label>
                                <input class="form-control form-control-sm" type="text" placeholder="Image" @bind-value="CreateItem.Image" />
                            </div>

                            <div class="text-center mt-3">
                                <button type="button" class="btn btn-primary" @onclick="CreateItemSave">Submit</button>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
}
@code {
    [Parameter]
    public ItemDTO CreateItem { get; set; }

    [Parameter]
    public EventCallback ItemSearch { get; set; }

    [Parameter]
    public EventCallback<string> ChangeState { get; set; }

    public string message;
    public string pageState;

    protected override async Task OnInitializedAsync()
    {
        pageState = "Active";
    }

    // Save Edited Item
    private async Task CreateItemSave()
    {
        try
        {
            if (CreateItem.ItemId == null
            || CreateItem.Price == null
            || CreateItem.Tradable == null
            || CreateItem.Quantity == null
            || string.IsNullOrEmpty(CreateItem.Name)
            || string.IsNullOrEmpty(CreateItem.Type)
            || string.IsNullOrEmpty(CreateItem.Image))
            {
                return;
            }
            var response = await client.PostAsJsonAsync("https://localhost:8000/api/AdminItem", CreateItem);
            if (response.IsSuccessStatusCode)
            {
                pageState = "Active";
                await ReturnToTable();
            }
            else
            {
                pageState = "Error";
                message = "There was an issue with creating the item";
            }
        }
        catch (Exception ex)
        {
            pageState = "Error";
            message = ex.Message;
        }
    }

    private async Task ReturnToTable()
    {
        await ItemSearch.InvokeAsync();
        await ChangeState.InvokeAsync("Table");
    }
}

@page "/admin/itemmanager"
@using Blacksmith.Blazor.Pages.Admin.ItemManager.Components;
@using Blacksmith.Blazor.Pages.Admin.Components;
@inject HttpClientTokenService client

@if (pageState == "Table")
{
    <AdminItemManagerTableComponent ItemList="@itemList" Item="@item" Pagination="@pagination" ItemSearch="ItemSearch" NameSearch="NameSearch" ChangeState="ChangeState" UpdateItem="UpdateItem" DeleteItem="DeleteItem"></AdminItemManagerTableComponent>
}
@if (pageState == "Create")
{
    <AdminItemManagerCreateComponent Item="@item" CreateItem="CreateItem" ChangeState="ChangeState" ItemSearch="ItemSearch"></AdminItemManagerCreateComponent>
}
@if (pageState == "Edit")
{
    <AdminItemManagerEditComponent Item=@item EditItem="EditItem" ChangeState="ChangeState" ItemSearch="ItemSearch"></AdminItemManagerEditComponent>
}
@if (pageState == "Loading")
{
    <LoadingComponent Message="Item Manager"></LoadingComponent>
}
@if (pageState == "Error")
{
    <ErrorComponent Message="@message"></ErrorComponent>
}

@code {
    public ItemDTO item { get; set; } = new ItemDTO();
    public List<ItemDTO> itemList { get; set; } = new List<ItemDTO>();
    public PaginationDTO pagination = new PaginationDTO() { PageNumber = 1, PageSize = 10, LastItemId = 0, SearchQuery = "" };

    public string message;
    public string pageState;
    private AdminItemManagerTableComponent ItemManager;

    protected override async Task OnInitializedAsync()
    {
        pageState = "Loading";
        await ItemSearch();
        pageState = "Table";
    }

    public void ChangeState(string value)
    {
        pageState = value;
        StateHasChanged();
    }

    // Item Table Search
    public async Task ItemSearch()
    {
        var response = await client.GetAsync($"https://localhost:8000/api/AdminItem?pageNumber={pagination.PageNumber}&pageSize={pagination.PageSize}&searchQuery={pagination.SearchQuery}&lastItemId={pagination.LastItemId}");
        var result = await response.Content.ReadFromJsonAsync<ItemManagerResponseDTO>();
        if (result != null && result.Data.Count >= 1 && result.LastItemId != null)
        {
            itemList = result.Data;
            pagination.LastItemId = result.LastItemId;
            pageState = "Active";
        }
        else
        {
            pageState = "Error";
            message = "The requested table or it's contents returned as null/empty.";
        }
        StateHasChanged();
    }

    // Save Edited Item
    private async Task CreateItem()
    {
        Console.WriteLine($"CreateItemMethod: {JsonSerializer.Serialize(item)}");
        var response = await client.PostAsync<string, ItemDTO>("https://localhost:8000/api/AdminItem/Create", item);
        if (response.IsSuccessStatusCode)
        {
            await ItemSearch();
            pageState = "Table";
        }
        else
        {
            pageState = "Error";
            message = "There was an issue with creating the item";
        }
    }

    // Save Edited Item
    private async Task EditItem()
    {
        var response = await client.PutAsync<string, ItemDTO>($"https://localhost:8000/api/AdminItem/Update/{item.Id}", item);
        if (response.IsSuccessStatusCode)
        {
            await ItemSearch();
            pageState = "Table";
        }
        else
        {
            pageState = "Error";
            message = "There was an issue with editing the item";
        }
    }

    // Delete an item
    private async Task DeleteItem(int id)
    {
        var response = await client.PutAsync<string, ItemDTO>($"https://localhost:8000/api/AdminItem/Update/{id}", new ItemDTO() { Id = id});
        //await client.DeleteAsync($"https://localhost:8000/api/AdminItem/{id}");
        await ItemSearch();
    }

    // Save Edited Item
    private async Task UpdateItem(ItemDTO input)
    {
        item = input;
    }

    // Input Search Query
    private async Task NameSearch()
    {
        pagination.PageNumber = 1;
        pagination.LastItemId = 0;
        await ItemSearch();
    }

    // Pagination (Previous)
    private async Task PreviousPage()
    {
        pagination.PageNumber--;
        await ItemSearch();
    }

    // Pagination (Next)
    private async Task NextPage()
    {
        pagination.PageNumber++;
        await ItemSearch();
    }
}
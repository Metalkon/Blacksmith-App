@page "/Confirmation"
@inject HttpClient client
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <Authorized>
        <!-- Content for authorized users -->
        <p>You are already logged in.</p>
    </Authorized>
    <NotAuthorized>
        <p>@message</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    UserConfirmDTO userConfirm = new UserConfirmDTO();
    string message = null;
    string confirmType = null;

    protected override void OnInitialized()
    {
        message = "initialized";
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        userConfirm.User.Username   = query["username"];
        userConfirm.User.Email = query["email"];
        userConfirm.Code = query["code"];
        confirmType = query["confirmtype"];
        base.OnInitialized();

        if (confirmType == "Login" || confirmType == "Register")
        {
            SendConfirmation(userConfirm, confirmType);
        }
        if (confirmType == "UnlockEmail")
        {
            SendConfirmationUnlock(userConfirm);            
        }
    }

    private async Task SendConfirmation(UserConfirmDTO userConfirm, string confirmType)
    {
        HttpResponseMessage result = await client.PostAsJsonAsync($"https://localhost:8000/api/{confirmType}/confirmation", userConfirm);

        if (result.IsSuccessStatusCode)
        {
            string tokenString = await result.Content.ReadAsStringAsync();
            TokenDTO tokens = JsonSerializer.Deserialize<TokenDTO>(tokenString);
            await LocalStorage.SetItemAsync("refreshtoken", tokens.RefreshToken);
            await LocalStorage.SetItemAsync("token", tokens.Jwt);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            string error = await result.Content.ReadAsStringAsync();
            message = $"ERROR: {error}";
        }
    }

    private async Task SendConfirmationUnlock(UserConfirmDTO userConfirm)
    {
        HttpResponseMessage result = await client.PostAsJsonAsync($"https://localhost:8000/api/Account/unlock", userConfirm);

        if (result.IsSuccessStatusCode)
        {
            string returnString = await result.Content.ReadAsStringAsync();
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            string error = await result.Content.ReadAsStringAsync();
            message = $"ERROR: {error}";
        }
    }
}
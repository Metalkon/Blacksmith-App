@page "/Register"
@inject HttpClient client
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<AuthorizeView>
    <Authorized>
        <p>You cannot register while you are logged in.</p>
    </Authorized>
    <NotAuthorized>
        <main class="d-flex justify-content-center align-items-center h-75 ">
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-sm-10 col-md-8 col-lg-6">
                        <div class="card">
                            <div class="card-body m-sm-4">
                                <b><h3>Register</h3></b>
                                <div class="mb-3">
                                    <label class="form-label">Username</label>
                                    <input class="form-control form-control-lg" type="text" placeholder="Enter your Username" @bind-value="user.Username" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <input class="form-control form-control-lg" type="email" placeholder="Enter your Email" @bind-value="user.Email" />
                                </div>
                                <div class="text-center mt-3">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => SendEmail(user))">Submit</button>
                                </div>
                            </div>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <span style="color: red; font-size: 12px;">@message</span>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </NotAuthorized>
</AuthorizeView>

@code {
    UserDTO user = new UserDTO();
    private string message = string.Empty;
    private bool IsUserLoggedIn { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        IsUserLoggedIn = authState.User.Identity.IsAuthenticated;
        if (IsUserLoggedIn == true)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    async Task SendEmail(UserDTO user)
    {
        try
        {
            if (IsUserLoggedIn == true)
            {
                message = "You cannot register while you are logged in.";
                return;
            }
            if (string.IsNullOrEmpty(user.Username) || string.IsNullOrEmpty(user.Email))
            {
                message = "Please fill out the required username and email field";
                return;
            }
            else
            {
                var result = await client.PostAsJsonAsync($"https://localhost:8000/api/Register/register", user);
                if (result.IsSuccessStatusCode)
                {
                    message = await result.Content.ReadAsStringAsync();
                }
                else
                {
                    string error = await result.Content.ReadAsStringAsync();
                    message = $"ERROR: {error}";
                }
                Task.Delay(1000);
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
    }
}